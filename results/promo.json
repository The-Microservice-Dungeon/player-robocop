{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Java 15",
  "type": "Class can be a record",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Class can be a record",
  "detailsInfo": "Suggests replacing classes with records.\n\nThe inspection can be useful if you need to focus on modeling immutable data rather than extensible behavior.\nAutomatic implementation of data-driven methods, such as equals and accessors, helps to get rid of boilerplate.\n\n\nNote that not every class can be a record. Here are some of the restrictions:\n\n* A class must contain no inheritors and must be a top-level class.\n* All the non-static fields in class must be final.\n* Class must contain no instance initializers, generic constructors, nor native methods.\n\nTo get a full list of the restrictions, refer to the\n[Oracle documentation](https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html).\n\nExample:\n\n\n      class Point {\n        private final double x;\n        private final double y;\n\n        Point(double x, double y) {\n          this.x = x;\n          this.y = y;\n        }\n\n        double getX() {\n          return x;\n        }\n\n        double getY() {\n          return y;\n        }\n      }\n\nThis record will be converted to:\n\n\n      record Point(int x, int y) {\n      }\n\nThis inspection only reports if the language level of the project or module is 15 preview or higher.\n\nNew in 2020.3",
  "sources": [
    {
      "type": "class",
      "path": "backend/src/main/java/thkoeln/dungeon/planet/application/PlanetApplicationService.java",
      "language": "JAVA",
      "line": 17,
      "offset": 13,
      "length": 24,
      "code": {
        "startLine": 15,
        "length": 24,
        "offset": 23,
        "surroundingCode": "\n@Service\npublic class PlanetApplicationService {\n    private final PlanetRepository planetRepository;\n"
      }
    }
  ],
  "attributes": {
    "module": "backend",
    "inspectionName": "ClassCanBeRecord"
  },
  "hash": "-3912297256098550948"
},{
  "tool": "Code Inspection",
  "category": "Java 9",
  "type": "Null check can be replaced with method call",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Replace condition with Objects.requireNonNullElse",
  "detailsInfo": "Reports null checks that can be replaced with an `Objects`/`Stream` static method.\n\n**Example:**\n\n\n    if (message == null) {\n      application.messageStorage().save(new EmptyMessage());\n    } else {\n      application.messageStorage().save(message);\n    }\n\nAfter the quick-fix is applied:\n\n\n      application.messageStorage()\n        .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));\n\n\nUse the **Don't warn if length of replacement bigger than original** option to ignore the cases when the replacement is longer than the\noriginal code.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "method",
      "path": "backend/src/main/java/thkoeln/dungeon/map/MapJSONWrapper.java",
      "language": "JAVA",
      "line": 67,
      "offset": 16,
      "length": 2,
      "code": {
        "startLine": 65,
        "length": 2,
        "offset": 127,
        "surroundingCode": "            if (planet != null) {\n                Integer movementDifficulty = planet.getMovementDifficulty();\n                if (movementDifficulty == null) {\n                    gravity = 9;\n                } else {"
      }
    }
  ],
  "attributes": {
    "module": "backend",
    "inspectionName": "ReplaceNullCheck"
  },
  "hash": "-1797330541803089225"
}]}